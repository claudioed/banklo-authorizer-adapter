// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// The country code from ISO 3166 find more at https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
type CountryCode = string

// The currency code from ISO 4217 find more at https://en.wikipedia.org/wiki/ISO_4217
type CurrencyCode = string

// GenericError defines model for generic-error.
type GenericError struct {
	Code        *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
}

// Id defines model for id.
type Id = string

// RequestCancellation defines model for request-cancellation.
type RequestCancellation struct {
	AcquirerCode      *Id `json:"acquirer_code,omitempty"`
	AuthorizationCode *Id `json:"authorization_code,omitempty"`

	// The country code from ISO 3166 find more at https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
	CountryCode *CountryCode `json:"country_code,omitempty"`

	// The currency code from ISO 4217 find more at https://en.wikipedia.org/wiki/ISO_4217
	CurrencyCode    *CurrencyCode `json:"currency_code,omitempty"`
	MerchantCode    *Id           `json:"merchant_code,omitempty"`
	TransactionData *struct {
		CardId          *Id     `json:"card_id,omitempty"`
		TransactionId   *Id     `json:"transaction_id,omitempty"`
		TransactionType *string `json:"transaction_type,omitempty"`
	} `json:"transaction_data,omitempty"`
}

// RequestReversal defines model for request-reversal.
type RequestReversal struct {
	AcquirerCode      *Id `json:"acquirer_code,omitempty"`
	AuthorizationCode *Id `json:"authorization_code,omitempty"`

	// The country code from ISO 3166 find more at https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
	CountryCode *CountryCode `json:"country_code,omitempty"`

	// The currency code from ISO 4217 find more at https://en.wikipedia.org/wiki/ISO_4217
	CurrencyCode    *CurrencyCode `json:"currency_code,omitempty"`
	MerchantCode    *Id           `json:"merchant_code,omitempty"`
	TransactionData *struct {
		CardId          *Id     `json:"card_id,omitempty"`
		TransactionId   *Id     `json:"transaction_id,omitempty"`
		TransactionType *string `json:"transaction_type,omitempty"`
	} `json:"transaction_data,omitempty"`
}

// RequestTransaction defines model for request-transaction.
type RequestTransaction struct {
	AcquirerCode      *Id `json:"acquirer_code,omitempty"`
	AuthorizationCode *Id `json:"authorization_code,omitempty"`

	// The country code from ISO 3166 find more at https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
	CountryCode *CountryCode `json:"country_code,omitempty"`

	// The currency code from ISO 4217 find more at https://en.wikipedia.org/wiki/ISO_4217
	CurrencyCode    *CurrencyCode `json:"currency_code,omitempty"`
	MerchantCode    *Id           `json:"merchant_code,omitempty"`
	TransactionData *struct {
		Amount          *float32 `json:"amount,omitempty"`
		CardId          *Id      `json:"card_id,omitempty"`
		TransactionId   *Id      `json:"transaction_id,omitempty"`
		TransactionType *string  `json:"transaction_type,omitempty"`
		WithPassword    *bool    `json:"with_password,omitempty"`
	} `json:"transaction_data,omitempty"`
}

// ResponseTransactions defines model for response-transactions.
type ResponseTransactions struct {
	RegisteredAt  time.Time `json:"registered_at"`
	TransactionId Id        `json:"transaction_id"`
}

// N201Success defines model for 201-success.
type N201Success = ResponseTransactions

// N400BadRequest defines model for 400-bad-request.
type N400BadRequest = GenericError

// N401Unauthorized defines model for 401-unauthorized.
type N401Unauthorized = GenericError

// N403Forbidden defines model for 403-forbidden.
type N403Forbidden = GenericError

// N500Unavailable defines model for 500-unavailable.
type N500Unavailable = GenericError

// CreateTransactionJSONBody defines parameters for CreateTransaction.
type CreateTransactionJSONBody = RequestTransaction

// RequestCancellationJSONBody defines parameters for RequestCancellation.
type RequestCancellationJSONBody = RequestCancellation

// RequestReversalJSONBody defines parameters for RequestReversal.
type RequestReversalJSONBody = RequestReversal

// CreateTransactionJSONRequestBody defines body for CreateTransaction for application/json ContentType.
type CreateTransactionJSONRequestBody = CreateTransactionJSONBody

// RequestCancellationJSONRequestBody defines body for RequestCancellation for application/json ContentType.
type RequestCancellationJSONRequestBody = RequestCancellationJSONBody

// RequestReversalJSONRequestBody defines body for RequestReversal for application/json ContentType.
type RequestReversalJSONRequestBody = RequestReversalJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /transactions)
	CreateTransaction(ctx echo.Context) error

	// (POST /transactions/{id}/cancellation)
	RequestCancellation(ctx echo.Context, id Id) error

	// (POST /transactions/{id}/reversal)
	RequestReversal(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTransaction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTransaction(ctx)
	return err
}

// RequestCancellation converts echo context to params.
func (w *ServerInterfaceWrapper) RequestCancellation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestCancellation(ctx, id)
	return err
}

// RequestReversal converts echo context to params.
func (w *ServerInterfaceWrapper) RequestReversal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestReversal(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/transactions", wrapper.CreateTransaction)
	router.POST(baseURL+"/transactions/:id/cancellation", wrapper.RequestCancellation)
	router.POST(baseURL+"/transactions/:id/reversal", wrapper.RequestReversal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX2/bNhD/KsKtbxNjSrJlW29pMQwBCnRIu6cuMyjyZLO1SJWk22aGv/tAybElWc2c",
	"Ig0GNG+Sdf949/uddOctcF1WWqFyFrItGLSVVhbrm5hGxG44R1vfcq0cKucvWVWtJWdOajX6YLXyv1m+",
	"wpL5qxcGC8jgl9HR9qh5akd3DogzTFnGvQkLu90uBIGWG1n5XyAD2IUwppTkTBCDnzZo3aMFsUSFRnKC",
	"xmjzbecR2Si2cStt5D8ontp7QgptcikEqqd1PaHUH/wzk2uWr/Epne/Cva094DbKmdsF16KOoiv9boXB",
	"XiLwEkFhdBlcvX0TJFGaBoVUIii1wYC5YOVcZbPRCNXFF/lRVigku9BmOfJ3o9fSuoUuFldv3yy87qLt",
	"2P6lIAT8ysrK5wIur3+HEEr29TWqpVtBloRQStW6c7eVF7TOSLX0CeUbY1Dxew+yF+mdZBxH04ecxJ/A",
	"6/Ri/u3P64fG3C1Wtj1a83XxxwBKI+iXsBYPSrSWLdHbqYyu0DiJ9qi5PXXXsXLyfBeCk64+SjeuQ+A6",
	"/4DceUtSdKKFMc9pns6R4DgXZJwWKclpFJEZFxMRi2SejvNectJudtIQKuYcGn/Av99TMmekuNnOduRw",
	"PT7jOop3L2Ag0/vmRjhTHNdrdpeDVsIZ/7SRBs0eQJBP0+mczSihnMYkilCQ2ZQWZJqk8zSNZxOKDEK4",
	"6121yY7ufBp3dZHQXMwLJpKUplMIe9yDl9eXcALkxlZOu7aihNBijBEiTyc1REo0fMWU64bPZl01SqKE",
	"xZSKyZwmXq31hlgI5ur+0v7NVxpYHE9Q5HUqksYWQ5oQnohZQedTHhdFz9a+Ap18706g2sv5/a1NCl/J",
	"oXyfo9fvc/dpdGSHesu9yh3h3Ullzgl2qCo9kjMjFg0NH2bue3SaYg52jG5naPWQQcYNtJI7OYOf0Vi2",
	"fmblj2flIdfPjPwJGXmo/j1sbPl6JuQ3CMlKHxdkcRI1X0TnxjD0njQopIMQvki3WlTM2i/aCMic2eAz",
	"SR+PpHc1OzBHbcocTR3t/4C/J/U/SORar5GpMynepu8gy4f2A12eG1xK69CgWDAHGcQ0jgmdknjyLqLZ",
	"eJxFs18ppRTCoTcTpSmdc8+DtOHBPKYTMk2KdEInLM6Tyenc0vO4hUKbsvYtmEPiZIlDn/YPL8W+z0mD",
	"ArL3fQNhL5CbdnqH8nZaED8hqUKfTqGXf1zZwOnAIEf5GQP86icetg469LTNbPqSqY9rDUf3l3vaB7UZ",
	"Jljl0I9nvp039qMLekF9UnSFilUSMkgu6EUM9XS1qtM86he90s3Wx9ei9n/la/jKIHP4rgOkPbxeanH7",
	"iLuqU8juuiWqm2B4sjb7luWD3Ki9W2s2Xf+t01+HNUuqc/R6m6xmv/R9ipNzIu2vkOpGwJa2h2kLN/5J",
	"p+yjrRS7UX8YHgbCdZOIV93v+IoZVqJD4931Yd5yFUjhAe/xcRscDIMnCGQ1KCEExUqP7z352mUPz0RR",
	"TeubH4vQ3iz7U0G0vSd9Mny2R8J7sXl9/KL9CXHZmuaeMfmImDw+OlkmtySP4LFHxHT/d7nZ/RsAAP//",
	"ATZmJAIaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
